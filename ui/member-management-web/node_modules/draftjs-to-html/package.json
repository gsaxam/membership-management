{
  "_args": [
    [
      {
        "raw": "draftjs-to-html",
        "scope": null,
        "escapedName": "draftjs-to-html",
        "name": "draftjs-to-html",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/p2345716/dev/membermanagementtool/ui/member-management-web"
    ]
  ],
  "_from": "draftjs-to-html@latest",
  "_id": "draftjs-to-html@0.8.3",
  "_inCache": true,
  "_location": "/draftjs-to-html",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/draftjs-to-html_0.8.3_1518801173371_0.6654807601121839"
  },
  "_npmUser": {
    "name": "jyotipuri",
    "email": "jyotipuri@gmail.com"
  },
  "_npmVersion": "4.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "draftjs-to-html",
    "scope": null,
    "escapedName": "draftjs-to-html",
    "name": "draftjs-to-html",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/draftjs-to-html/-/draftjs-to-html-0.8.3.tgz",
  "_shasum": "0ca3c273e802ed3b3bbf12e3900ebb70fd95517f",
  "_shrinkwrap": null,
  "_spec": "draftjs-to-html",
  "_where": "/Users/p2345716/dev/membermanagementtool/ui/member-management-web",
  "author": {
    "name": "Jyoti Puri"
  },
  "bugs": {
    "url": "https://github.com/jpuri/draftjs-to-html/issues"
  },
  "dependencies": {},
  "description": "A library for draftjs to html conversion.",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.3",
    "babel-loader": "^7.1.2",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "babel-register": "^6.26.0",
    "chai": "^4.1.2",
    "draft-js": "^0.10.4",
    "enzyme": "^3.2.0",
    "eslint": "^4.12.1",
    "eslint-config-airbnb": "^16.1.0",
    "eslint-plugin-import": "2.8.0",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-mocha": "^4.11.0",
    "eslint-plugin-react": "^7.5.1",
    "flow-bin": "^0.60.1",
    "jsdom": "^11.5.1",
    "mocha": "^4.0.1",
    "react": "^16.2.0",
    "react-addons-test-utils": "^15.6.2",
    "react-dom": "^16.2.0",
    "rimraf": "^2.6.2",
    "sinon": "^4.1.2",
    "webpack": "^3.9.1",
    "webpack-dev-middleware": "^1.12.2"
  },
  "directories": {},
  "dist": {
    "shasum": "0ca3c273e802ed3b3bbf12e3900ebb70fd95517f",
    "tarball": "https://registry.npmjs.org/draftjs-to-html/-/draftjs-to-html-0.8.3.tgz",
    "fileCount": 10,
    "unpackedSize": 180569
  },
  "gitHead": "65fc3b30b743e630d2b85c65e5becce2ab4f2699",
  "homepage": "https://github.com/jpuri/draftjs-to-html#readme",
  "license": "MIT",
  "main": "lib/draftjs-to-html.js",
  "maintainers": [
    {
      "name": "jyotipuri",
      "email": "jyotipuri@gmail.com"
    }
  ],
  "name": "draftjs-to-html",
  "optionalDependencies": {},
  "readme": "# DraftJS TO HTML\n\nA library for converting DraftJS Editor content to plain HTML.\n\nThis is draft to HTML library I wrote for one of my projects. I am open-sourcing it so that others can also be benefitted from my work.\n\n## Installation\n\n`npm install draftjs-to-html`\n\n## Usage\n\n```\nimport { convertToRaw } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\n\nconst rawContentState = convertToRaw(editorState.getCurrentContent());\n\nconst markup = draftToHtml(\n  contentState, \n  hashtagConfig, \n  directional, \n  customEntityTransform\n);\n```\nThe function parameters are:\n\n1. **contentState**: Its instance of  [RawDraftContentState](https://facebook.github.io/draft-js/docs/api-reference-data-conversion.html#content)\n\n2. **hashConfig**: Its configuration object for hashtag, its required only if hashtags are used. If the object is not defined hashtags will be output as simple text in the markdown.\n    ```\n    hashConfig = {\n      trigger: '#',\n      separator: ' ',\n    }\n    ```\n    Here trigger is character that marks starting of hashtag (default '#') and separator is character that separates characters (default ' '). These fields in hastag object are optional.\n\n3. **directional**: Boolean, if directional is true text is aligned according to bidi algorithm. This is also optional.\n\n4. **customEntityTransform**: Its function to render custom defined entities by user, its also optional.\n\n   **editorState** is instance of DraftJS               [EditorState](https://draftjs.org/docs/api-reference-editor-state.html#content).\n\n## Supported conversions\nFollowing is the list of conversions it supports:\n\n1. Convert block types to corresponding HTML tags:\n\n    || Block Type | HTML Tag |\n    | -------- | -------- | -------- |\n    | 1 | header-one | h1 |\n    | 2 | header-two | h2 |\n    | 3 | header-three | h3 |\n    | 4 | header-four | h4 |\n    | 5 | header-five | h5 |\n    | 6 | header-six | h6 |\n    | 7 | unordered-list-item | ul |\n    | 8 | ordered-list-item | ol |\n    | 9 | blockquote | blockquote |\n    | 10 | code | pre |\n    | 11 | unstyled | p |\n\n    It performs these additional changes to text of blocks:\n    - replace blank space in beginning and end of block with `&nbsp;`\n    - replace `\\n` with `<br>`\n    - replace `<` with `&lt;`\n    - replace `>` with `&gt;`\n\n\n2. Converts ordered and unordered list blocks with depths to nested structure of `<ul>, <ol>` and `<li>`.\n\n3. Converts inline styles BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, CODE, SUPERSCRIPT, SUBSCRIPT to corresponding HTML tags: `<strong>, <em>, <ins>, <code>, <sup>, <sub>`.\n\n4. Converts inline styles color, background-color, font-size, font-family to a span tag with inline style details:\n`<span style=\"color:xyz;font-size:xx\">`. (The inline styles in JSON object should start with strings `color` or `font-size` like `color-red`, `color-green` or `fontsize-12`, `fontsize-20`).\n\n5. Converts entity range of type link to anchor tag using entity data url for href, targetOption for target: `<a href=\"url\" target=\"_self\">text</a>`. Default target is `_self`.\n\n6. Converts entity range of type mention to anchor tag using entity data url for href and value for data-value, it also adds class to it: `<a href=\"url\" class=\"wysiwyg-mention\" data-mention data-value=\"value\">text</a>`.\n\n7. Converts atomic entity image to image tag using entity data src for image source, and if present alt, alignment, height, width also: `<img src=\"src\" alt=\"alt_text\" style=\"float: left, height: 50px; width: 50px\"/>`.\n\n8. Converts embedded links to iFrames, using width, height and src from entity data. `<iframe width=\"width\" height=\"height\" src=\"src\" frameBorder=\"0\"></iframe>`\n\n9. Converts hashtags to anchor tag: `<a href=\"#tag\" class=\"wysiwyg-hashtag\">#tag</a>`.\n\n9. `customEntityTransform` can be used for transformation of a custom entity block to html. If present its call to generate html for entity. It can take 2 parameter:\n   1. `entity` ( object with { type, mutalibity, data})\n   2. `text` text present in the block.\n\n10. Adding style property to block tag for block level styles like text-align: `<p style=\"text-align: right\">text</p>`.\n\n11. RTL, if directional function parameter is true, generated blocks have property `dir = \"auto\"` thus they get aligned according to bidi algorithm.\n\n## License\nMIT.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jpuri/draftjs-to-html.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:webpack",
    "build:webpack": "NODE_ENV=production webpack --config config/webpack.prod.config.js",
    "check": "npm run lint && npm run flow",
    "clean": "rimraf lib",
    "flow": "flow; test $? -eq 0 -o $? -eq 2",
    "lint": "eslint js",
    "test": "mocha --compilers js:config/test-compiler.js config/test-setup.js js/**/*Test.js"
  },
  "version": "0.8.3"
}
