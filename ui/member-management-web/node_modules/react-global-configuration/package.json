{
  "_args": [
    [
      {
        "raw": "react-global-configuration",
        "scope": null,
        "escapedName": "react-global-configuration",
        "name": "react-global-configuration",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/p2345716/dev/membermanagementtool/ui/member-management-web"
    ]
  ],
  "_from": "react-global-configuration@latest",
  "_id": "react-global-configuration@1.2.1",
  "_inCache": true,
  "_location": "/react-global-configuration",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-global-configuration-1.2.1.tgz_1516300253399_0.8847230356186628"
  },
  "_npmUser": {
    "name": "moreno_fa",
    "email": "moreno.fa@outlook.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-global-configuration",
    "scope": null,
    "escapedName": "react-global-configuration",
    "name": "react-global-configuration",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-global-configuration/-/react-global-configuration-1.2.1.tgz",
  "_shasum": "f7adb5fba7b76cab5c4bc2d79e3be790762fbccc",
  "_shrinkwrap": null,
  "_spec": "react-global-configuration",
  "_where": "/Users/p2345716/dev/membermanagementtool/ui/member-management-web",
  "author": {
    "name": "@moreno_fa"
  },
  "bugs": {
    "url": "https://github.com/morenofa/react-global-configuration/issues"
  },
  "dependencies": {
    "deep-freeze": "0.0.1",
    "object-assign": "^4.1.1",
    "serialize-javascript": "^1.4.0"
  },
  "description": "For setting a global config object managed as a requirement",
  "devDependencies": {
    "babel": "^5.3.3",
    "chai": "^2.3.0",
    "gulp": "^3.8.11",
    "gulp-babel": "^5.1.0",
    "gulp-debug": "^2.0.1",
    "gulp-eslint": "^0.12.0",
    "gulp-istanbul": "^0.9.0",
    "gulp-mocha": "^2.0.1",
    "gulp-strip-debug": "^1.0.2",
    "yargs": "^3.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f7adb5fba7b76cab5c4bc2d79e3be790762fbccc",
    "tarball": "https://registry.npmjs.org/react-global-configuration/-/react-global-configuration-1.2.1.tgz"
  },
  "gitHead": "441abdb5f4d1b516f1176cfec421a351477ab3d4",
  "homepage": "https://github.com/morenofa/react-global-configuration#readme",
  "keywords": [
    "react",
    "global",
    "configurator"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "moreno_fa",
      "email": "moreno_fa@terra.com"
    }
  ],
  "name": "react-global-configuration",
  "optionalDependencies": {},
  "readme": "# React global configuration\n\n[![Build Status](https://travis-ci.org/morenofa/react-global-configuration.svg?branch=master)](https://travis-ci.org/morenofa/react-global-configuration)\n\n## Purpose\n\nProvide what is essentially an explicitly set of frozen global variables which can then be required by any module that needs them.\n\nThis can be preferable to having to pass any configuration all the way through your node application, or put your configuration inside state of component. This method is  usually better than setting global variables.\n\n\n## Installation\n\n```bash\n$ npm install react-global-configuration\n```\n\n## API\n\n__set( configuration [, options] )__\n\n````js\nimport config from 'react-global-configuration';\n\nconfig.set({ foo: 'bar' });\n````\n\n- __configuration__ whatever you want to be made available when subsequently importing / requiring get function `react-global-configuration`.\n- __options__ object optionally containing the following:\n    - __options.freeze__ _default: true_ - used to prevent the [freezing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) of the configuration object.\n    - __options.assign__ _default: false_ - causes the passed configuration object to have its properties [assigned](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) to the existing configuration, rather than replacing it.\n\n__get( [key], [default] )__\n\n````js\nimport config from 'react-global-configuration';\n\nconfig.get('foo');\n````\n\n- __key__ key to the setting you want to recover. If you do not put this key you recover all settings.\n- __default__ default value if not exists the setting with the specified key. If you do not put this parameter you get `null` value by default.\n\n__serialize()__\n\n````js\nimport config from 'react-global-configuration';\n\nconfig.serialize();\n````\n\nSerialize configuration to a superset of JSON.\n\n__reset()__\n\n````js\nimport reset from 'react-global-configuration/reset';\n\nreset();\n````\n\nThis is a testing utility that removes the existing configuration from the require cache. By calling this, calling `config.set(configuration)` and then re-requiring any target file, that target file will then be returned from require with the new `configuration` applied.\n\n## Example Usage\n\n### Server Side\n\n__config.js__ (global configuration file)\n````js\nconst config = {\n    foo: 'bar' \n};\n\nexport default config;\n````\n\n__server.js__ (initiation of server side process)\n````js\nimport config from 'react-global-configuration';\nimport configuration from './config';\nimport App from './app';\n\nconfig.set(configuration);\n\nnew App();\n````\n\n__render.js__ (render of server side process)\n````js\nimport config from 'react-global-configuration';\n\nexport renderScripts = () => \n    `\n        <script>\n            window.__INITIAL_CONFIG__ = ${config.serialize()};\n        </script>\n    `;\n````\n\n### Client Side\n\n__client.js__ (initiation of client side js, assume compiled via browserify / webpack / similar)\n````js\nimport React from 'react';\nimport config from 'react-global-configuration';\nimport App from './app';\n\n(function clientJS() {\n    config.set(window.__INITIAL_CONFIG__);\n    React.render(<App/>, document);\n}());\n````\n\n### React \n\n__component.js__ (somewhere inside the client side app)\n````js\nimport React from 'react';\nimport config from 'react-global-configuration';\n\nclass Component extends React.Component {\n    render() {\n        return (\n            <div>{ config.get('foo') }</div>\n        );\n    }\n};\n\nexport default Component;\n````\n\n### Testing\n\n__gulp/test.js__\n````js\nimport gulp from 'gulp';\nimport mocha from 'gulp-mocha';\nimport config from 'react-global-configuration';\n\nconfig.set({ foo: 'baz' }, { freeze: false });\n\ngulp.task('test', function gulpTest() {\n    return (\n        gulp\n            .src([ 'app/**.test.*' ], { read: false })\n            .pipe(mocha())\n    );\n});\n````\n\n__appLogic.test.js__\n````js\nimport reset from 'react-global-configuration/reset';\nimport assert from 'assert';\n\ndescribe('appLogic', () => {\n    it('should return foo from configuration', () => {\n        import config from 'react-global-configuration';\n    \n        const foos = [ 'alpha', 'beta', 'gamma' ];\n        foos.forEach((foo) => {\n            // This only works because `freeze: false` was set the first time set was called (in gulp/test.js).\n            config.set({ foo: foo });\n            const appLogic = require('./appLogic');\n            assert(appLogic() === foo);\n        });\n    });\n\n    afterEach(() => {\n        reset();\n    });\n});\n````\n\n## Thanks\n\nReact global configuration was initially inspired by global-configuration. Many thanks to Josh-a-e.\n\n## License\n\n<a rel=\"license\" href=\"https://opensource.org/licenses/MIT\">MIT</a>",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/morenofa/react-global-configuration.git"
  },
  "scripts": {
    "build": "gulp build",
    "lint": "gulp lint",
    "test": "gulp build && gulp test"
  },
  "version": "1.2.1"
}
