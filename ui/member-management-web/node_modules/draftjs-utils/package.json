{
  "_args": [
    [
      {
        "raw": "draftjs-utils@^0.9.3",
        "scope": null,
        "escapedName": "draftjs-utils",
        "name": "draftjs-utils",
        "rawSpec": "^0.9.3",
        "spec": ">=0.9.3 <0.10.0",
        "type": "range"
      },
      "/Users/p2345716/dev/membermanagementtool/ui/member-management-web/node_modules/react-draft-wysiwyg"
    ]
  ],
  "_from": "draftjs-utils@>=0.9.3 <0.10.0",
  "_id": "draftjs-utils@0.9.4",
  "_inCache": true,
  "_location": "/draftjs-utils",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/draftjs-utils_0.9.4_1524659046492_0.9215140129978536"
  },
  "_npmUser": {
    "name": "jyotipuri",
    "email": "jyotipuri@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "draftjs-utils@^0.9.3",
    "scope": null,
    "escapedName": "draftjs-utils",
    "name": "draftjs-utils",
    "rawSpec": "^0.9.3",
    "spec": ">=0.9.3 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-draft-wysiwyg"
  ],
  "_resolved": "https://registry.npmjs.org/draftjs-utils/-/draftjs-utils-0.9.4.tgz",
  "_shasum": "976c61aa133dbbbfedd65ae1dd6627d7b98c6f08",
  "_shrinkwrap": null,
  "_spec": "draftjs-utils@^0.9.3",
  "_where": "/Users/p2345716/dev/membermanagementtool/ui/member-management-web/node_modules/react-draft-wysiwyg",
  "author": {
    "name": "Jyoti Puri"
  },
  "bugs": {
    "url": "https://github.com/jpuri/draftjs-utils/issues"
  },
  "dependencies": {},
  "description": "Collection of utility function for use with Draftjs.",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.3",
    "babel-loader": "^7.1.2",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "babel-register": "^6.26.0",
    "chai": "^4.1.2",
    "draft-js": "^0.10.4",
    "enzyme": "^3.2.0",
    "eslint": "^4.12.1",
    "eslint-config-airbnb": "^16.1.0",
    "eslint-plugin-import": "2.8.0",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-mocha": "^4.11.0",
    "eslint-plugin-react": "^7.5.1",
    "flow-bin": "^0.60.1",
    "immutable": "^3.8.2",
    "jsdom": "^11.5.1",
    "mocha": "^4.0.1",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "rimraf": "^2.6.2",
    "sinon": "^4.1.2",
    "webpack": "^3.9.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-KYjABSbGpJrwrwmxVj5UhfV37MF/p0QRxKIyL+/+QOaJ8J9z1FBKxkblThbpR0nJi9lxPQWGg+gh+v0dAsSCCg==",
    "shasum": "976c61aa133dbbbfedd65ae1dd6627d7b98c6f08",
    "tarball": "https://registry.npmjs.org/draftjs-utils/-/draftjs-utils-0.9.4.tgz",
    "fileCount": 5,
    "unpackedSize": 22160,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4HNoCRA9TVsSAnZWagAAR6EP/2IHQenitlU3JC9pM0PB\nzYmIPGlMp71dsyi9dDIw1Zqg0Esdqjc3upGQMSgXYO+dKW8tZDpslPis2+hh\nb/Nd3UjIWDrxGQE+8u8s/eZNyrKK5OfIdLPmbZfwVeJ2lb/c/t3ZpyLePDdc\nfwbCcEKhpqU6RPJCaBypYRixhOODzjLrbKdyDdEj9+DBzgBkZr5+iDiJMEDI\n6O9ZPM9fIc5DJQx054rNRZPqaGS2TfdfbmSm3RbQMAXN60fVfE8y30jAZxSI\nGDh5q634dvuMjg3gJJy2ZAg4oCUZ/rp0EyvC50S9hZG1UnQhMO6OpStq82Jd\nDUl8E6WBEkeHHudo71wnFkqXwHSxOlCkwmSRnvdmo71IiHDbPO8e1dxO9c6T\nOOaZdwJKV1GJHBEp4lVSioLn9CZmWq6XU1aHb7XL0PAH1miOBiEjC5K4I7+V\nkf/l7UlSHPUqD/xHQfPQoQDSCGPN76ud5i2zfbQNj+Gcc2qYOV++mfjeWlqh\nosVAIpS62z7GTs/D28iotyuRTXdl4TA250OrgIU6JUiKYCmgsrSBpYJb9aTm\nC/0LSF6j1iKH5TcPvm4Dv2lMEhB3Qu/7s+4Y1Ft0sPRb15qcSf2L/v62dFq/\nYHhvk7I66aht1MiLHC5nE1mDv55RR98sWok1d6NoghWTOEoHkQywZ3lJ+Tig\n/Wvz\r\n=F/Sn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "6169800ac38867dd8caf2a2d13640382d12cec14",
  "homepage": "https://github.com/jpuri/draftjs-utils#readme",
  "license": "MIT",
  "main": "lib/draftjs-utils.js",
  "maintainers": [
    {
      "name": "jyotipuri",
      "email": "jyotipuri@gmail.com"
    }
  ],
  "name": "draftjs-utils",
  "optionalDependencies": {},
  "peerDependencies": {
    "draft-js": "^0.10.x",
    "immutable": "3.x.x || 4.x.x"
  },
  "readme": "# DraftJS Utils\n\nAn collection of useful utility functions for [DraftJS](https://github.com/facebook/draft-js).\n\nI have been using DraftJS in few of my projects. DraftJS is very nice library for creating editors. I wrote a couple of utility functions for myself which I can re-use across my projects. They are well tested. I am open-sourcing them so that others can also leverage.\nMany of the functions described use [ImmutableJS](https://facebook.github.io/immutable-js/).\n\n## Installing\n\n`npm install draftjs-utils`\n\n## Methods\n| | Method Name | Parameters | Return Type | Description |\n| -------- | -------- | -------- | -------- | -------- |\n| 1 | getSelectedBlocksMap | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [OrderedMap](https://facebook.github.io/immutable-js/docs/#/OrderedMap) |The function will return an Immutable OrderedMap of currently selected Blocks. The key is key of Block and value is [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content). |\n| 2 | getSelectedBlocksList | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [List](https://facebook.github.io/immutable-js/docs/#/List) | The function will return an Immutable List of currently selected Blocks. The data type of returned objects is [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content). |\n| 3 | getSelectedBlock | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content) | The function will return first of currently selected Blocks, this is more useful when we expect user to select only one Block. The data type of returned object is [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content). |\n| 3 | getBlockBeforeSelectedBlock | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content) | The function will return block just before the selected block(s). The data type of returned object is [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content). |\n| 5 | getAllBlocks | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [List](https://facebook.github.io/immutable-js/docs/#/List) | The function will return all the Blocks of the editor. The data type of returned objects is [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content). |\n| 6 | getSelectedBlocksType | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | string | The function will return the type of currently selected Blocks. The type is a simple string. It will return `undefined` if not all selected Blocks have same type.|\n| 7 | removeSelectedBlocksStyle | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | The function will reset the type of selected Blocks to `unstyled`.|\n| 8 | getSelectionText | [EditorState](https://facebook.githubgetSelectionInlineStyle.io/draft-js/docs/api-reference-editor-state.html#content) | string | The function will return plain text of current selection.|\n| 9 | addLineBreakRemovingSelection | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | The function will replace currently selected text with a `\\n`.|\n| 10 | insertNewUnstyledBlock | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) |[EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | The function will add a new unstyled Block and copy current selection to it.|\n| 11 | clearEditorContent | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | The function will clear all content from the Editor.|\n| 12 | getSelectionInlineStyle | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | object | The function will return inline style applicable to current selection. The function will return only those styles that are applicable to whole selection.|\n| 13 | setBlockData | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content), object | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | The function will add block level meta-data.|\n| 14 | getSelectedBlocksMetadata | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [Map](https://facebook.github.io/immutable-js/docs/#/Map) | The function will return map of block data of current block.|\n| 15 | blockRenderMap |  | [Map](https://facebook.github.io/immutable-js/docs/#/Map) | The function will return map of block types Block Type -> HTML Tag.|\n| 16 | getSelectionEntity | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [Entity](https://facebook.github.io/draft-js/docs/api-reference-entity.html#content) | The function will return the Entity of current selection. Entity can not span multiple Blocks, method will check only first selected Block.|\n| 17 | getEntityRange | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content), entityKey | object | The function will return the range of given Entity in currently selected Block. Entity can not span multiple Blocks, method will check only first selected Block.|\n| 18 | handleNewLine | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) |[EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content), Event | The function will handle newline event in editor gracefully, it will insert `\\n` for soft-new lines and remove selected text if any. |\n| 19 | isListBlock | [ContentBlock](https://facebook.github.io/draft-js/docs/api-reference-content-block.html#content) |  boolean | The function will return true is type of block is 'unordered-list-item' or 'ordered-list-item'.|\n| 20 | changeDepth | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) , adjustment, maxDepth | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | Change the depth of selected Blocks by adjustment if its less than maxdepth.|\n| 21 | getSelectionCustomInlineStyle | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) , Array<String> (of styles) | object | Function will return Map of custom inline styles applicable to current selection.|\n| 22 | toggleCustomInlineStyle | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) , string (styleType), string(styleValue) | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | Toggle application of custom inline style to current selection.|\n| 23 | removeAllInlineStyles | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | [EditorState](https://facebook.github.io/draft-js/docs/api-reference-editor-state.html#content) | The function will remove all inline styles of current selection.|\n\n## Demo\nFor a complete example, check out https://github.com/jpuri/react-draft-wysiwyg repo.\n\n## License\nMIT.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jpuri/draftjs-utils.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:webpack",
    "build:webpack": "NODE_ENV=production webpack --config config/webpack.prod.config.js",
    "check": "npm run lint && npm run flow",
    "clean": "rimraf lib",
    "flow": "flow; test $? -eq 0 -o $? -eq 2",
    "lint": "eslint js",
    "test": "mocha --compilers js:config/test-compiler.js config/test-setup.js js/**/*Test.js"
  },
  "version": "0.9.4"
}
